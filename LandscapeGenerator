from PIL import Image, ImageDraw
import math
from perlin_noise import PerlinNoise
import random
import numpy as np
import csv
import matplotlib.pyplot as plt
import os
import multiprocessing

from concurrent.futures import ThreadPoolExecutor
from multiprocessing import Pool, cpu_count, Process, Manager

from concurrent.futures import ThreadPoolExecutor, as_completed


import time

MAP_SIZE = (1024, 1024) # taille de la carte
SCALE = 256 # échelle de la carte
EXPO_HEIGHT = 2 # exposant pour la normalisation de la hauteur 
num_threads = cpu_count() - 1  # Nombre de threads pour le multithreading

# Couleurs pour la texture
COLORS = {
    "grass" : (34,139,34),
    "forest" : (0, 100, 0),
    "sand" : (238, 214, 175),
    "water" : (65,105,225),
    "rock" : (139, 137, 137),
    "snow" : (255, 250, 250),
    "explosion" : (255, 0, 0)
}


# Vecteurs pour le calcul de la pente 
lut_vectors = (
    (-1, 1), (0, 1), (1, 1),
    (-1, 0),         (1, 0),
    (-1, -1), (0, -1), (1, -1)
)


''' Partie non threadée '''

def generate_heightmap():
    
    '''
    Génère la carte 

'''

    seed = int(random.random()*1000) # générateur de seed aléatoire pour obtenir des cartes différentes
    minimum = 0
    maximum = 0
    heightmap = np.zeros(MAP_SIZE) # initialise la carte avec une taille de 512x512 avec des valeurs nulles

    # remplit la carte avec les valeurs de bruit de perlin
    for x in range(MAP_SIZE[0]):
        for y in range(MAP_SIZE[1]):
            new_value = update_point((x, y), seed)
            heightmap[x][y] = new_value
            if new_value < minimum:
                minimum = new_value
            if new_value > maximum:
                maximum = new_value
    print("Carte de hauteur générée avec la seed :", seed)
    return normalize(heightmap, minimum, maximum, EXPO_HEIGHT)

def generate_slopemap(heightmap):

    '''
    Génère la carte de pente
    heightmap : map
'''

    slopemap = np.zeros(MAP_SIZE)
    minimum = 0
    maximum = 0

    for x in range(MAP_SIZE[0]):
        for y in range(MAP_SIZE[1]):
            
            slope = 0
            for vector in lut_vectors:
                coord = (x+vector[0], y+vector[1])
                if out_of_bounds(coord):
                    continue
                slope += abs(heightmap[x][y]-heightmap[coord[0]][coord[1]])
            slope = slope/8
            slopemap[x][y] = slope
            if slope < minimum:
                minimum = slope
            if slope > maximum:
                maximum = slope
    print("Slopemap generated")
    return normalize(slopemap, minimum, maximum, 1)

def shortest_path(start, end, matrix, heightmap):
    '''
        Trouve le chemin optimal entre deux points
        distance : matrice des distances
        start : point de départ
        end : point d'arrivée
    '''

    rows, cols = len(matrix), len(matrix[0])
    distance = np.full((rows, cols), np.inf)  # Initialise les distances avec l'infini
    visited = np.zeros((rows, cols), dtype=bool)  # Tableau pour marquer les points visités
    distance[start[0]][start[1]] = 0  # La distance du point de départ à lui-même est zéro
    # Parcours de la matrice pour calculer les distances
    for i in range(start[0], rows):
        for j in range(start[1], cols):
            if (i, j) != start:
                # Distance depuis le voisin gauche ou haut (si existant)
                distance[i][j] = abs(matrix[i][j]) + min(
                    distance[i - 1][j] if i > 0 else np.inf,
                    distance[i][j - 1] if j > 0 else np.inf
                )
    return distance

def find_optimal_path(distance, start, end):
    '''
        Trouve le chemin optimal entre deux points
        distance : matrice des distances
        start : point de départ
        end : point d'arrivée
    '''

    path = [end]
    i, j = end
    # Remontez le chemin depuis `end` vers `start`
    while (i, j) != start:
        if i > 0 and distance[i - 1, j] <= distance[i, j - 1]:
            i -= 1
        elif j > 0 and distance[i, j - 1] <= distance[i - 1, j]:
            j -= 1
        else:
            break
        path.append((i, j))
    path.reverse()
    return path



'''Gestion des fichiers'''

def put_file_in_folder():

    '''
    Déplace un fichier dans un dossier
    filename : nom du fichier à déplacer
'''

    folder_path = "./map" # chemin du dossier
    if not os.path.exists(folder_path):
        os.makedirs(folder_path) # crée le dossier s'il n'existe pas
    
    for file in os.listdir("."):
        if file.endswith(".png"):
            os.rename(file, os.path.join(folder_path, file))
            print(f"Fichier {file} déplacé avec succès dans {folder_path}")

def delete_file(filename):

    '''
    Supprime un fichier dans le dossier map
    filename : nom du fichier à supprimer
'''

    folder_path = "./map"
    file_path = os.path.join(folder_path, filename)

    if os.path.exists(file_path):
        os.remove(file_path) # supprime le fichier
        print(f"Fichier {filename} supprimé avec succès")
    else:
        print(f"Erreur: Le fichier {filename} n'existe pas")

def delete_all_files():

    '''
    Supprime tous les fichiers dans le dossier map
'''


    folder_path = "./map"
    count = 0 # compteur de fichiers supprimés

    for filename in os.listdir(folder_path):
        file_path = os.path.join(folder_path, filename)
        os.remove(file_path)
        count += 1
        print(f"Fichier {filename} supprimé avec succès")
    print(f"Total de {count} fichiers supprimés")


''' Partie calculs '''


def update_point(coords, seed):

    '''
    Met à jour la valeur d'un point de la carte de hauteur
    coords : tuple (x, y)
    seed : générateur de bruit de perlin 
'''

    x, y = coords
    noise = PerlinNoise(octaves=6, seed=seed) # utilisation de la librairie perlin noise pour générer le bruit de perlin 
    value = noise([x/SCALE, y/SCALE]) 
    return value # retourne la valeur du bruit de perlin pour les coordonnées x, y

def normalize(input_map, minimum, maximum, expo):

    '''
    Normalise la carte de hauteur entre 0 et 1
    input_map : la carte à normaliser
    minimum : valeur minimale de la carte
    maximum : valeur maximale de la carte
    expo : exposant pour la normalisation 
'''
    scale = maximum - minimum
    output_map = np.zeros(MAP_SIZE)
    for x in range(MAP_SIZE[0]):
        for y in range(MAP_SIZE[1]):
            output_map[x][y] = ((input_map[x][y] - minimum)/scale)**expo
    return output_map


''' Partie threadée '''

def process_chunk(chunk_coords, seed):
    """Traite une portion de la carte pour générer la hauteur."""
    results = {}
    for x, y in chunk_coords:
        results[(x, y)] = update_point((x, y), seed)
    return results


def generate_heightmap_multiprocessing():
    seed = int(random.random() * 1000)
    heightmap = np.zeros(MAP_SIZE)

    # Divise les coordonnées en blocs pour chaque processus
    all_coords = [(x, y) for x in range(MAP_SIZE[0]) for y in range(MAP_SIZE[1])]
    chunks = np.array_split(all_coords, num_threads)

    with Pool(processes=num_threads) as pool:
        results = pool.starmap(process_chunk, [(chunk, seed) for chunk in chunks])

    # Met à jour la carte de hauteur
    for result in results:
        for (x, y), value in result.items():
            heightmap[x, y] = value

    # Normalise la carte de hauteur
    print("Carte de hauteur générée avec la seed :", seed)
    return normalize(heightmap, np.min(heightmap), np.max(heightmap), EXPO_HEIGHT)


def process_slope_chunk(chunk_coords, heightmap, lut_vectors):
    """Calcule les pentes pour une portion de la carte."""
    results = {}
    for x, y in chunk_coords:
        z = heightmap[x, y]
        slopes = [
            abs(z - heightmap[x + dx, y + dy])
            for dx, dy in lut_vectors
            if not out_of_bounds((x + dx, y + dy))
        ]
        results[(x, y)] = sum(slopes) / len(slopes) if slopes else 0
    return results


def generate_slopemap_multiprocessing(heightmap):
    slopemap = np.zeros(MAP_SIZE)

    # Divise les coordonnées en blocs pour chaque processus
    all_coords = [(x, y) for x in range(MAP_SIZE[0]) for y in range(MAP_SIZE[1])]
    chunks = np.array_split(all_coords, num_threads)

    with Pool(processes=num_threads) as pool:
        results = pool.starmap(process_slope_chunk, [(chunk, heightmap, lut_vectors) for chunk in chunks])

    # Met à jour la carte de pente
    for result in results:
        for (x, y), slope in result.items():
            slopemap[x, y] = slope

    # Normalise la carte de pente
    print("Carte de pente générée.")
    return normalize(slopemap, np.min(slopemap), np.max(slopemap), 1)


def out_of_bounds(coord):
    """
    Vérifie si les coordonnées sont en dehors de la carte.
    coord : tuple (x, y)
    """
    x, y = coord
    return x < 0 or x >= MAP_SIZE[0] or y < 0 or y >= MAP_SIZE[1]


''' Exportation des données '''


def get_color(height, slope):

    '''
    Retourne la couleur correspondant à la hauteur et la pente
'''

    if height > 0.2 and height < 0.9 and slope > 0.45:
       return COLORS["rock"]
    if height <= 0.1:
        return COLORS["water"]
    elif height > 0.1 and height <= 0.225:
        return COLORS["sand"]
    elif height > 0.225 and height <= 0.45:
        return COLORS["grass"]
    elif height > 0.45 and height <= 0.85:
        return COLORS["forest"]
    elif height > 0.85 and height <= 0.9:
        return COLORS["rock"]
    elif height > 0.9:
        return COLORS["snow"]


def generate_csv(map, filename):

    '''
    Génère un fichier csv à partir de la carte pour meilleur visualisation des données 
    map : carte
    filename : nom du fichier
'''

    filename = filename + ".csv"
    with open(filename, "w") as file:
        for x in range(MAP_SIZE[0]):
            row_data = ",".join(str(map[x][y]) for y in range(MAP_SIZE[1])) # écrit les données de la carte dans le fichier
            file.write(row_data + "\n")

    print(f"{filename} created successfully.")

    return


def export_texture(heightmap, slopemap, filename):

    
    ''' 
        Exporte la texture de la carte
    '''

    image = Image.new('RGB', MAP_SIZE, 0)
    draw = ImageDraw.ImageDraw(image)
    for x in range(MAP_SIZE[0]):
        for y in range(MAP_SIZE[1]):
            draw.point((x, y), get_color(heightmap[x][y], slopemap[x][y]))
    image.save(filename + ".png") 
    print(filename, "sauvegardé")
    return


''' Calcul du chemin optimal '''

def calculate_block(matrix, start, rows_range, cols_range, distance, result_dict, process_id):
    # result_dict = {}  # Remove re-initialization of result_dict
    """
    Calcul d'un bloc de la matrice pour le chemin le plus court.
    """
    local_distance = np.copy(distance)  # Copie locale pour éviter les conflits
    for i in rows_range:
        for j in cols_range:
            if (i, j) != start:
                local_distance[i, j] = abs(matrix[i][j]) + min(
                    local_distance[i - 1, j] if i > 0 else np.inf,
                    local_distance[i, j - 1] if j > 0 else np.inf
                )
    # Enregistre le résultat dans le dictionnaire partagé
    result_dict[process_id] = local_distance

def shortest_path_multiprocessing(start, end, matrix, num_processes):
    """
    Calcule le chemin le plus court en utilisant le multiprocessing.
    """
    rows, cols = len(matrix), len(matrix[0])
    distance = np.full((rows, cols), np.inf)  # Initialise les distances avec l'infini
    distance[start[0], start[1]] = 0  # La distance du point de départ à lui-même est zéro
    
    rows_per_process = rows // num_processes  # Divise les lignes entre les processus
    manager = Manager()
    result_dict = manager.dict()  # Dictionnaire partagé pour collecter les résultats
    
    processes = []
    for process_id in range(num_processes):
        row_start = process_id * rows_per_process
        row_end = (process_id + 1) * rows_per_process if process_id != num_processes - 1 else rows
        process = Process(
            target=calculate_block, 
            args=(matrix, start, range(row_start, row_end), range(cols), distance, result_dict, process_id)
        )
        processes.append(process)
        process.start()
    
    # Attend la fin des processus
    for process in processes:
        process.join()
    
    # Combine les résultats
    final_distance = np.full((rows, cols), np.inf)
    for process_id, local_distance in result_dict.items():
        final_distance = np.minimum(final_distance, local_distance)
    
    return final_distance

def find_optimal_path(distance, start, end):
    """
    Retrouve le chemin optimal à partir de la matrice de distances.
    """
    path = [end]
    i, j = end

    while (i, j) != start:
        if i > 0 and distance[i - 1, j] <= distance[i, j - 1]:
            i -= 1
        elif j > 0 and distance[i, j - 1] <= distance[i - 1, j]:
            j -= 1
        else:
            break
        path.append((i, j))

    path.reverse()
    return path

def process_export_chunk(chunk_coords, heightmap, slopemap, shortest_path_route):
    """Traite une portion de la carte pour l'exportation."""
    results = {}
    for x, y in chunk_coords:
        if (x, y) in shortest_path_route:
            results[(x, y)] = (255, 0, 0)  # Red for the optimal path
        else:
            results[(x, y)] = get_color(heightmap[x][y], slopemap[x][y])
    return results

def export_map_dijkstra(distance, filenameDijkstra, heightmap, slopemap, start, end):
    '''
    Exporte la carte avec le chemin optimal en rouge
    distance : matrice des distances
    filenameDijkstra : nom du fichier
    heightmap : carte de hauteur
    slopemap : carte de pente
    start : point de départ
    end : point d'arrivée
    '''

    shortest_path_route = find_optimal_path(distance, start, end)  # Get the optimal path from start to end

    # Divise les coordonnées en blocs pour chaque processus
    all_coords = [(x, y) for x in range(MAP_SIZE[0]) for y in range(MAP_SIZE[1])]
    chunks = np.array_split(all_coords, num_threads)

    with Pool(processes=num_threads) as pool:
        results = pool.starmap(process_export_chunk, [(chunk, heightmap, slopemap, shortest_path_route) for chunk in chunks])

    # Create a new image of the map size
    image = Image.new('RGB', MAP_SIZE, 0)
    draw = ImageDraw.Draw(image)

    # Met à jour l'image avec les résultats
    for result in results:
        for (x, y), color in result.items():
            draw.point((x, y), color)

    # Save the image with the optimal path in red
    image.save(filenameDijkstra + ".png")
    print(f"{filenameDijkstra}.png saved with the optimal path.")

def plot_dijkstra(final_landscape, path):

    '''
    Visualise la carte en 3D avec le chemin optimal
    final_landscape : carte de hauteur
    path : chemin optimal
'''

    rows, cols = final_landscape.shape
    x = np.arange(rows)
    y = np.arange(cols)
    x, y = np.meshgrid(x, y)

    fig = plt.figure()
    ax = fig.add_subplot(111, projection='3d')

    ax.plot_surface(x, y, final_landscape, cmap='terrain', alpha=0.7)

    path_x, path_y = zip(*path)
    path_z = final_landscape[path_x, path_y]
    ax.plot(path_x, path_y, path_z, color='red', linewidth=2, marker='o', markersize=5, markerfacecolor='red')

    ax.set_xlabel('X')
    ax.set_ylabel('Y')
    ax.set_zlabel('Hauteur')
    ax.set_title('Paysage 3D avec Chemin Optimal')

    plt.show()





''' PARTIE FUN '''

def explode_map(map_matrix, explosion_center=None, radius=20, impact=-0.2):
    """
    Explodes a part of the map by modifying values in a given region.

    :param map_matrix: The matrix representing the map.
    :param explosion_center: The (x, y) coordinates of the explosion center. Random if None.
    :param radius: The radius of the explosion.
    :param impact: The value to subtract from impacted cells.
    """
    rows, cols = map_matrix.shape
    if explosion_center is None:
        explosion_center = (random.randint(0, rows - 1), random.randint(0, cols - 1))
    x_center, y_center = explosion_center

    y, x = np.ogrid[:rows, :cols]
    mask = (x - x_center)**2 + (y - y_center)**2 <= radius**2
    map_matrix[mask] += impact
    map_matrix[map_matrix < 0] = 0  # Ensure no negative values
    return map_matrix

def get_valid_input(prompt, input_type, min_val=None, max_val=None):
    """
    Get validated user input.
    """
    while True:
        try:
            value = input_type(input(prompt))
            if (min_val is not None and value < min_val) or (max_val is not None and value > max_val):
                raise ValueError("Value out of range.")
            return value
        except ValueError as e:
            print(f"Invalid input: {e}")


''' Menu '''

def menu():
    heightmap = None
    slopemap = None
    distance = None
    path = None
    start = (-1, -1)
    end = (-1, -1)

    while True:
        print("+------------------------------------+")
        print("|              Menu                  |")
        print("|------------------------------------|")
        print("| 1. Générer la carte                |")
        print("| 2. Exporter la carte               |")
        print("| 3. Exporter la carte en CSV        |")
        print("| 4. Calculer et exporter le chemin  |")
        print("| 5. Supprimer un fichier            |")
        print("| 6. Supprimer tous les fichiers     |")
        print("| 7. Générer la carte multithreading |")
        print("| 8. Générer tous les chemins        |")
        print("| 9. MACRON EXPLOSION                |")
        print("| 10. Quitter                        |")
        print("+------------------------------------+")

        choice = input("Choisissez une option: ")

        if choice == "1":
            print("Génération de la carte...")
            start_time = time.time()
            heightmap = generate_heightmap()
            slopemap = generate_slopemap(heightmap)
            end_time = time.time()
            print(f"Temps de génération: {end_time - start_time} secondes pour une taille de {MAP_SIZE[0]}x{MAP_SIZE[1]}")
            
            print("Carte générée avec succès.")

        elif choice == "2":
            if heightmap is not None and slopemap is not None:
                filename = input("Entrez le nom de votre map (ex: map):")
                export_texture(heightmap, slopemap, filename)
                put_file_in_folder()
            else:
                print("Erreur: La carte n'a pas été générée. Veuillez générer la carte d'abord (Option 1).")

        elif choice == "3":
            if heightmap is not None:
                filename = input("Entrez le nom du fichier CSV (ex: matrice): ")
                start_time = time.time()
                generate_csv(heightmap, filename)
                end_time = time.time()
                print(f"Temps d'exportation: {end_time - start_time} secondes pour une taille de {MAP_SIZE[0]}x{MAP_SIZE[1]}")
            else:
                print("Erreur: La matrice n'a pas été générée. Veuillez générer la carte d'abord (Option 1).")

        elif choice == "4":
            if heightmap is not None and slopemap is not None:
                while start[0] < 0 or start[0] >= MAP_SIZE[0] or start[1] < 0 or start[1] >= MAP_SIZE[1] or end[0] < 0 or end[0] >= MAP_SIZE[0] or end[1] < 0 or end[1] >= MAP_SIZE[1]:
                    start = int(input("Entrez la coordonnée x du point de départ: ")), int(input("Entrez la coordonnée y du point de départ: "))
                    end = int(input("Entrez la coordonnée x du point d'arrivée: ")), int(input("Entrez la coordonnée y du point d'arrivée: "))   
                start_time = time.time()            
                distance = shortest_path_multiprocessing(start, end, heightmap, num_threads)
                path = find_optimal_path(distance, start, end)
                end_time = time.time()
                

                print(f'Chemin optimal de {start} à {end}: {path}')
                print(f'Nombre de points dans le chemin: {len(path)}')
                print(f"Temps de calcul: {end_time - start_time} secondes pour une taille de {MAP_SIZE[0]}x{MAP_SIZE[1]}")
                
                filenameDikstra = input("Entrez le nom du fichier pour la carte Dijkstra (ex: dijkstra): ")
                
                start_time = time.time()
                export_map_dijkstra(distance, filenameDikstra, heightmap, slopemap, start, end)
                end_time = time.time()
                print(f"Temps d'exportation: {end_time - start_time} secondes pour une taille de {MAP_SIZE[0]}x{MAP_SIZE[1]}")
                print("Chemin optimal exporté avec succès.")
                put_file_in_folder()
                if(input("Voulez-vous visualiser le chemin optimal en 3D ? (O/N) ") == "O"):
                    plot_dijkstra(heightmap, path)
                    print("Pour Re obtenir le menu il faut fermer la fenêtre de la visualisation 3D")
                else:
                    print("Visualisation 3d annulée.")
            else:
                print("Erreur: La carte n'a pas été générée. Veuillez générer la carte d'abord (Option 1).")

        elif choice == "5":
            filename = input("Entrez le nom du fichier à supprimer: ")
            delete_file(filename)

        elif choice == "6":
            delete_all_files()

        elif choice == "10":
            print("Etes-vous sûr de vouloir quitter le programme ? (O/N)")
            answer = input()
            if answer == "O":
                print("Vraiment vraiment sûr ? (O/N)")
                answer = input()
                if answer == "O":
                    print("Dernière chance ! Voulez-vous vraiment partir ? (O/N)")
                    answer = input()
                    if answer == "O":
                        print("Est-ce que je ne vais vraiment pas pouvoir te convaincre de rester ? (O/N)")
                        answer = input()
                        if answer == "O":
                            print("Oh reste ici stp :(") 
                            print("Je suis triste de te voir partir :(")
                            print("Bon, c'est pas grave, à bientôt !")
                            break
                        else:
                            print("Ouf, j'ai eu peur !")
                            menu()
                    else:
                        print("Ouf, tu as changé d'avis !")
                        menu()
                else:
                    print("Je suis rassuré que tu restes !")
                    menu()
            else:
                print("D'accord, je reste alors !")
                menu()

            print("Sortie du programme.")
            break

        elif choice == "7":
            print("Génération de la carte avec multithreading...")
            start_time = time.time()
            heightmap = generate_heightmap_multiprocessing	()
            slopemap = generate_slopemap_multiprocessing(heightmap)
            end_time = time.time()
            print(f"Temps de génération avec multithreading: {end_time - start_time} secondes pour une taille de {MAP_SIZE[0]}x{MAP_SIZE[1]}")
            print("Carte générée avec succès.")


        elif choice == "8":
            if heightmap is not None and slopemap is not None:
                while start[0] < 0 or start[0] >= MAP_SIZE[0] or start[1] < 0 or start[1] >= MAP_SIZE[1] or end[0] < 0 or end[0] >= MAP_SIZE[0] or end[1] < 0 or end[1] >= MAP_SIZE[1]:
                    start = int(input("Entrez la coordonnée x du point de départ: ")), int(input("Entrez la coordonnée y du point de départ: "))
                    end = int(input("Entrez la coordonnée x du point d'arrivée: ")), int(input("Entrez la coordonnée y du point d'arrivée: "))       
                start_time = time.time()        
                distance = shortest_path(start, end, slopemap, heightmap)
                path = find_optimal_path(distance, start, end)
                end_time = time.time()
                print(f'Chemin optimal de {start} à {end}: {path}')
                print(f'Nombre de points dans le chemin: {len(path)}')
                print(f"Temps de calcul: {end_time - start_time} secondes pour une taille de {MAP_SIZE[0]}x{MAP_SIZE[1]}")
                
                filenameDikstra = input("Entrez le nom du fichier pour la carte Dijkstra (ex: dijkstra): ")
                export_map_dijkstra(distance, filenameDikstra, heightmap, slopemap, start, end)
                print("Chemin optimal exporté avec succès.")
                put_file_in_folder()

        elif choice == "9":
            x = get_valid_input(f"Enter explosion center X (0 to {MAP_SIZE[0] - 1}): ", int, 0, MAP_SIZE[0] - 1)
            y = get_valid_input(f"Enter explosion center Y (0 to {MAP_SIZE[1] - 1}): ", int, 0, MAP_SIZE[1] - 1)
            radius = get_valid_input("Enter explosion radius: ", int, 1)
            impact = get_valid_input("Enter explosion impact (negative value): ", float)
            heightmap = explode_map(heightmap, explosion_center=(x, y), radius=radius, impact=impact)
            print("Explosion applied to the map.")

        else:
            print("Option invalide. Veuillez réessayer.")

        

  
def main():
    menu()


if __name__ == "__main__":
    main()